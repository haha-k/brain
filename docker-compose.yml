version: "3.8"

services:
  db:
    container_name: mysql
    image: 'mysql:8.0'
    restart: unless-stopped
    volumes:
      - './mysql:/var/lib/mysql'
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - '${MYSQL_PORT}:3306'

  # db:
  #   restart: always
  #   image: postgres:14-alpine
  #   user: postgres
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: password
  #     POSTGRES_DB: earthworm
  #   volumes:
  #     - data:/var/lib/postgres/main-data
  #   ports:
  #     - 5433:5432
  # logto:
  #   restart: always
  #   depends_on:
  #     logtoPostgres:
  #       condition: service_healthy
  #   image: svhd/logto:${TAG-latest}
  #   entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
  #   ports:
  #     - 3010:3010
  #     - 3011:3011
  #   environment:
  #     - TRUST_PROXY_HEADER=1
  #     - DB_URL=postgres://postgres:p0stgr3s@logtoPostgres:5432/logto
  #     # Mandatory for GitPod to map host env to the container, thus GitPod can dynamically configure the public URL of Logto;
  #     # Or, you can leverage it for local testing.
  #     - PORT=3010
  #     - ADMIN_PORT=3011
  #     - ENDPOINT
  #     - ADMIN_ENDPOINT
  # logtoPostgres:
  #   restart: always
  #   image: postgres:14-alpine
  #   user: postgres
  #   environment:
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: p0stgr3s
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

volumes:
  data:
    driver: local
